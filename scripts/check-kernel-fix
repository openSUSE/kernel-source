#!/bin/bash
# vim: sw=4:sts=4:et

# TODO: Error handling is really not great. Especially failures from nested shells
# sucks.

. $(dirname "$0")/common-functions

usage()
{
    cat << EOF
Check state of a kernel fix and eventually suggest needed actions

Expect upstream kernel tree sha or CVE number as the parameter.
The script checks whether the commit is already in the upstream
baseline or backported in kernel-source tree.
Requires LINUX_GIT pointing to Linus git tree clone.

If backported, checks for CVE/bsc references and recommends adding these
if they are missing. (Requires VULNS_GIT pointing to
https://git.kernel.org/pub/scm/linux/security/vulns.git tree.
This will also allow cve number instead of sha and it resolves proer
upstream commit automatically.

Also the script looks for \"Fixes:\" tag of the given \"sha\".
When defined, the script informs where the fix has to be backported.

The script also takes into account the hierarchy of branches.
It checks all branches. But the action is proposed only for
the top level ones. The assumption is that the other branches
will get the fix via a merge.

If the patch has CVE number with CVSS score associated then limits
actions only to CVSS affected branches.

Usage: ${0##*/} [options] sha|CVE [branch(es)]

Parameters:
	sha: sha of the upstream commit
	cve: CVE-XXXX-YYYY of the upstream commit (requires VULNS_GIT)
	branch: kernel branch(es) to check.

Options:
	-h: help
	-v: verbose mode: show state of each branch and even NOP actions
	-r: refresh any cached data. Use if cve->sha or cve->cvss fails
	    (git pull VULNS_GIT, cve, bsc medata)
	-t: flat mode. Similar to -v but it filters output to a summary for
	   product branches only without any additional information. Useful
	   for a short summary when handing over to the security team.
	-s CVSS: override the CVSS score if known. This can be useful when
	   the CVE->CVSS DB is not synced yet.
	-b bsc#NUMBER: override the bugzilla number if known
	-f sha: provide explicit Fixes tag. Use when the one in the commit is
	   unknown but you could figure it from the code inspection.
	   Specify repeteadly if more are required
	-F: treat -f sha provided fixes as authoritative and override those
	   in the commit. Use this if Fixes: tags in the commit are incorrect
	   or if you want to enforce run without a known fixes tag.
	-c CVE-XXXX-YYYY: provide CVE number for the given sha. Use for
	   CVEs issued before the process has changed and VULNS_GIT doesn't
	   recognize this CVE
	-n Do not print maintainers candidates.
EOF
}

SUSE_GET_MAINTAINERS=/usr/bin/suse-get-maintainers
BUGZILLA_COUNT_USER_BUGS="$(dirname "$0")/python/ckf-count-user-bugs"
SUSE_GIT_FIXES=/usr/bin/git-fixes

if [ -z "$CVEKERNELTREE" ]
then
	export CVEKERNELTREE=$LINUX_GIT
fi
sha=
references=
cve=

tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
trap 'rm -rf "$tmpdir"' EXIT

actions_file="$tmpdir/actions"
affected_file="$tmpdir/affected"
fixed_file="$tmpdir/fixed"
git_fixes_sha="$tmpdir/git_fixes_sha"
git_fixes_output="$tmpdir/git_fixes_output"
no_fixes_shas="$tmpdir/no_fixes_shas"
git_fixes_pid=0
todo_branches="$tmpdir/todo_branches"

branch_state_sha_file()
{
	local branch=$1
	local sha=$2

	[ -z "$sha" ] && fail "sha missing"
	echo $tmpdir/branch-state.$(echo $branch | sed 's@/@_@g').$sha
}

set_branch_sha_state()
{
    local branch=$1
    local sha=$2
    local state=$3
    local branch_file="$(branch_state_sha_file $branch $sha)"

    echo "$state" > $branch_file
}

wait_for_file()
{
	while [ ! -s "$1" ]
	do
		sleep 1s
	done
}

handle_patch_present()
{
    local branch="$1"
    local sha="$2"
    shift 2
    local references="$@"
    local patch=$(sha_to_patch_in_branch "$sha" "$branch")

    # We have a backport that is not referenced by sha but only its CVE
    # usually when a custom backport which diverges from the upstream
    # solution is required
    if [ -n "$cve" ]
    then
            if git grep -qi "^References:.*$cve\>" origin/$branch
            then
                    set_branch_sha_state $branch $sha "ok_reference_present"
                    return 0
            fi
    fi

    if [ -n "$patch" ] ; then
	set_branch_sha_state $branch $sha "ok_commit_present"
	return 0
    fi

    return 1
}

handle_cve_blacklisted()
{
    local branch=$1
    local sha=$2
    local cve=$3
	local blacklist_entry=""

	if [ -n "$cve" ]; then
		blacklist_entry="$(get_blacklist_entry $branch $sha "$cve")"
		if [ -n "$blacklist_entry" ] ; then
			local blacklist_reason="$(echo $blacklist_entry | sed 's@^[a-f0-9]\+[[:space:]]#[[:space:]]*@@')"
			set_branch_sha_state $branch $sha "blacklisted:$blacklist_reason"
			return 0
		fi
	fi

	blacklist_entry="$(get_blacklist_entry $branch $sha)"
	if [ -n "$blacklist_entry" ]; then
		if [ -n "$cve" ]; then
			local warn_file="$(branch_state_sha_file $branch $sha).warns"
			echo -e "\tWW $blacklist_entry" >> $warn_file
			echo -e "\tWW blacklist entry without CVE reference. Recheck and remove or update the reference" >> $warn_file
		else
			local blacklist_reason="$(echo $blacklist_entry | sed 's@^[a-f0-9]\+[[:space:]]#[[:space:]]*@@')"
			set_branch_sha_state $branch $sha "blacklisted:$blacklist_reason"
			return 0
		fi
	fi

    return 1
}

handle_parent_inheritable_state()
{
    local branch=$1
    local sha=$2

    # Check parent branches are ok then nothing to be checked for this one
    # Disable the heuristic for the verbose mode where we want to see all
    # the actions
    if [ -z "$verbose_mode" -a $single_branch_mode -eq 0 ]
    then
	    local merge_branch=
	    for merge_branch in $(print_merge_branches $branches_conf $branch)
	    do
		    local merge_branch_file="$(branch_state_sha_file $merge_branch $sha)"
		    wait_for_file "$merge_branch_file"
		    if grep "ok_" "$merge_branch_file" >/dev/null 2>&1
		    then
			    set_branch_sha_state $branch $sha "ok_will_merge"
			    return 0
		    fi
	    done
    fi

    return 1
}

# Evaluate any potential warnings - i.e. non-authoritative facts that developer
# should consider when deciding whether the backport is worth pursuing.
# Examples:
# 	- this commit/cve is blacklisted in the parent branch
# 	- there is already a pending for-next branch pending for merge
# 	- potential warnings collected in configuration, support status or
# 	  arch support
check_for_warnings()
{
    local branch="$1"
    local sha=$2
    local cve="$3"
    local warn_file="$4"

    check_blacklisted_in_parent $branch $sha >> $warn_file
    check_pending_pr $branch $sha "$cve" >> $warn_file
}

has_warnings()
{
    local branch=$1
    local sha=$2
    local warn_file="$(branch_state_sha_file $branch $sha).warns"

    test -s $warn_file
}

print_warnings()
{
    local branch=$1
    local sha=$2
    local warn_file="$(branch_state_sha_file $branch $sha).warns"

    cat $warn_file 2>/dev/null
}

action_needed()
{
	echo "ACTION NEEDED!"
	if [[ -s $git_fixes_output &&  ! $(grep -q "Nothing found" $git_fixes_output) ]]
	then
		echo -e "\nPotential git-fixes for $(echo $sha | tr "\n" " ")"
		cat $git_fixes_output
	fi
}

print_no_fixes_warning()
{
	local arg=$1
	local cve=$2

	action_needed
	cat << EOF
There is no Fixes tag for:
$(cat $no_fixes_shas | xargs git -C $LINUX_GIT/.git show -s --pretty='format:%h ("%s")')
so we cannot automatically assess which kernel branches require the fix.
Please try to identify all the breakers and then
run ./scripts/check-kernel-fix -f BREAKER_SHA [-f BREAKER_SHA] $arg
to get the real list of branches to apply the fix into.

You can run ./scripts/check-kernel-fix -F $arg
to get an estimated list of branches to apply the fix into.
EOF

	if [ -n "$cve" ]
	then
		cat << EOF

However, if the CVE turns out to be non-issue or an attack vector is not really feasible and
determining the breaker is not feasible then please blacklist in following branches:
$(cat $todo_branches 2>/dev/null | sort -u)
EOF
	fi
}

check_config_discrepancy()
{
    local branch="$1"
    local conf_file_map="$2"
    shift 2

    [ "$single_branch_mode" -eq 1 ] && return 0
    for child in $(print_children_branches $branches_conf $branch)
    do
	    check_config "$child" "$conf_file_map" /dev/null "$@"
	    if [[ $? -ne 1 ]]
	    then
		    return 1
	    fi
    done

    return 0
}

check_supp_discrepancy()
{
    local branch="$1"
    local conf_file_map="$2"
    shift 2

    [ "$single_branch_mode" -eq 1 ] && return 0
    for child in $(print_children_branches $branches_conf $branch)
    do
	    check_mod_support "$child" "$conf_file_map" /dev/null "$@"
	    if [[ $? -ne 1 ]]
	    then
		    return 1
	    fi
    done

    return 0
}

check_arch_discrepancy()
{
    local branch="$1"
    shift 1

    [ "$single_branch_mode" -eq 1 ] && return 0
    for child in $(print_children_branches $branches_conf $branch)
    do
	    check_arch_support "$child" /dev/null "$@"
	    if [[ $? -ne 1 ]]
	    then
		    return 1
	    fi
    done

    return 0
}


# Check state of the given branch wrt to given sha, its fixes and references
#
# The outcome is recorded via set_branch_sha_state and the following states are
# possible
#
#   + nope_cvss: doesn't qualify based on the CVSS scoring
#   		 this could be addedd as a suffix to other states
#   		 (currently *missing_commit) in verbose mode
#   + nope_commit_in_base: the fix is already in the base kernel
#   + nope_unaffected: the fix is not required as the Fixes: commit is not present
#   + nope_unaffected_config: the is not required as config is disabled
#   + nope_arch_unsupported: the fix is not required as architecture is not enabled
#   + ok_reference_present: the CVE reference is present
#   + ok_commit_present: the commit is present
#   + ok_will_merge: fix will be merged from upstream branch
#   + missing_commit: sha is required but needs to be backported
#   + maybe_missing_commit: patch is missing and it is not known which commit
#	introduced the bug (given fixes is empty)
#   + blacklisted: blacklist.conf references the CVE. This could be either
#   	CVE line or sha # CVE
#   + unknown_config_disagree: parent branch disagrees in config space with children.
#   + unknown_support_disagree: parent branch disagrees in support status with children.
#   + unknown_arch_disagree: parent branch disagrees in arch enablement with children.
#     These Imply that parent is not a good candidate for backport but children might be.
#
# Global variables:
# branches_conf
# verbose_mode: if not defined then synchronizes with parent branches to eliminate
# 	actions that will be inherited through merge 
# conf_file_map: config file DB
# files[]: only used for {maybe_}missing_commit to check kernel configs
#
# Side effects:
# set_branch_sha_state called with appropriate action
check_branch_state()
{
    local branch="$1"
    local sha="$2"
    local fixes="$3"
    local cvss="$4"
    shift 4
    local references="$@"
    local warn_file="$(branch_state_sha_file $branch $sha).warns"

    [ -n "$flat_mode" ] && warn_file=/dev/null

    [ -z "$branch" ] && fail "check_branch_state: No branch provided"
    [ -z "$sha" ] && fail "check_branch_state: No sha provided"

    local base=$(branch_base_ver $branch)

    # Already merged upstream?
    if sha_merged_in_upstream_tag "$sha" "$base" ; then
	set_branch_sha_state $branch $sha "nope_commit_in_base"
	return
    fi

    local conf_state_file="$(branch_state_sha_file $branch $sha).conf"
    check_config $branch $conf_file_map $conf_state_file "${files[@]}"
    local ret=$?
    grep WW "$conf_state_file" >> $warn_file 2>/dev/null
    # All configs are disabled for this branch. Check children whether
    # they agree on this.
    if [[ $ret -eq 1 ]]
    then
        check_config_discrepancy "$branch" "$conf_file_map" "${files[@]}"
        if [[ $? -eq 1 ]]
        then
            set_branch_sha_state $branch $sha "unknown_config_disagree"
        else
            set_branch_sha_state $branch $sha "nope_unaffected_config"
        fi

        return
    fi

    local supp_state_file="$(branch_state_sha_file $branch $sha).supp"
    check_mod_support "$branch" "$conf_file_map" "$supp_state_file" "${files[@]}"
    ret=$?
    grep WW "$supp_state_file" >> $warn_file 2>/dev/null
    # Module is unsupported for this branch. Check children whether
    # they agree on this
    if [[ $ret -eq 1 ]]
    then
        check_supp_discrepancy "$branch" "$conf_file_map" "${files[@]}"
        if [[ $? -eq 1 ]]
        then
            set_branch_sha_state $branch $sha "unknown_support_disagree"
	    return
        else
            set_branch_sha_state $branch $sha "nope_unsupported"
            return
        fi
    fi

    local arch_state_file="$(branch_state_sha_file $branch $sha).arch"
    check_arch_support "$branch" "$arch_state_file" "${files[@]}"
    ret=$?
    grep WW "$arch_state_file" >> $warn_file 2>/dev/null
    # Architecture is unsupported for this branch. Check children whether
    # they agree on this
    if [[ $ret -eq 1 ]]
    then
        check_arch_discrepancy "$branch" "${files[@]}"
        if [[ $? -eq 1 ]]
        then
            set_branch_sha_state $branch $sha "unknown_arch_disagree"
	    return
	# Enable the state only after we are confident this doesn't lead to false
	# negatives
        else
            set_branch_sha_state $branch $sha "nope_arch_unsupported"
            return
        fi
    fi

    local eligible=""
    cvss_affects_branch $branch $cvss || eligible="_nope_cvss"
    if  [ -z "$verbose_mode" -a -n "$eligible" ]
    then
	    set_branch_sha_state $branch $sha "nope_cvss"
	    return
    fi

    handle_parent_inheritable_state $branch $sha && return

    handle_cve_blacklisted $branch $sha "$cve" && return

    handle_patch_present $branch $sha $references && return

    # Sha is not backported
    # Do we need to backport it because of the Fixes tag?
    if [ -n "$fixes" ] ; then
	local affected="$(affected_by_git_fixes "$branch" "$base" $fixes)"

	if [ -n "$affected" ] ; then
	    set_branch_sha_state $branch $sha "missing_commit$eligible:$affected"
           check_for_warnings "$branch" $sha "$cve" $warn_file
	else
	    set_branch_sha_state $branch $sha "nope_unaffected"
	fi

	return
    fi

    # missing git fixes
    set_branch_sha_state $branch $sha "maybe_missing_commit$eligible:$ref"

    check_for_warnings "$branch" $sha "$cve" $warn_file
}

check_blacklisted_in_parent()
{
    local branch="$1"
    local sha=$2
    local merge_branch=

    for merge_branch in $(print_merge_branches $branches_conf $branch)
    do
	    local merge_branch_file="$(branch_state_sha_file $merge_branch $sha)"
	    if grep -E "blacklisted" "$merge_branch_file" >/dev/null 2>&1
	    then
		    echo -e "\tWW $merge_branch blacklisted ${sha}. Unless $branch differs then you can ignore this."
	    fi
    done
}

check_pending_pr()
{
	local branch=$1
	local sha=$2
       local cve=$3

	local pending_pr=
	for pending_pr in $(pending_pr_branches $branch)
	do
		patch=$(sha_to_patch_in_branch $sha $pending_pr)
		if [ -n "$patch" ]
		then
			echo -e "\tWW pending PR through $pending_pr"
			break
		fi
               local blacklist_entry="$(get_blacklist_entry ${pending_pr#origin/} $sha "$cve")"
               if [ -n "$blacklist_entry" ]
               then
                       echo -e "\tWW pending_pr PR through $pending_pr blacklists $sha"
                       break
               fi
	done
}

__print_action()
{
	echo $*
}

# Prints action for the given branch and sha
# Globals
# verbose_mode: only {maybe_}missing_patch are printed if this is empty
# warning_only_mode: only prints actions if there are warnings associated. This
# is used when no breaker is known and we just want to highlight branches that
# do not have configs enabled or might have other noteworthy aspects to consider.
#
# Side effects:
# creates $affected_file if the branch is affected (state != nope*)
# adds branch name to $fixed_file if the branch contains the fix (state = ok*)
# adds branch name to $actions_file if the branch needs an attention (state = *missing_commit|unknown*)
print_sha_action()
{
    local branch="$1"
    local sha="$2"
    local state="$3"
    shift 3
    local references="$@"
    local print_mode=$verbose_mode

    [ -n "$flat_mode" ] && print_mode=1

    [[ ! "$state" =~ nope.* ]] && touch $affected_file
    [[ "$state" =~ ok_.* ]] && echo "$branch" >> $fixed_file
    [[ "$state" =~ missing_commit$ ]] && echo "$branch" >> $actions_file

    case "$state" in
	missing_commit)
	    eligible_braches=$(($eligible_braches+1))
	    __print_action "$branch: MANUAL: backport $sha ($references)"
	    has_warnings $branch $sha && branches_with_warnings=$(($branches_with_warnings+1))
	    print_warnings $branch $sha
	    ;;

	maybe_missing_commit)
	    eligible_braches=$(($eligible_braches+1))
	    echo $branch >> $todo_branches
	    if has_warnings $branch $sha
	    then
		    branches_with_warnings=$(($branches_with_warnings+1))
	    elif [ $warning_only_mode -eq 1 -a $single_branch_mode -eq 0 -a -z "$verbose_mode" ]
	    then
		    # We want to print _potentially_ affected branches only when
		    # a specific branch is queried (single_branch_mode)
		    # -F is specified for No fixes tag commit
		    # we are in a verbose mode
		    return
	    fi
	    __print_action "$branch: MANUAL: might need backport of $sha ($references)"
	    print_warnings $branch $sha
	    ;;

	blacklisted) [ -n "$print_mode" ] && echo "$branch $state \"$references\""
		;;
	*) if [ -n "$print_mode" ]
	   then
		   echo "$branch: $state"
		   print_warnings $branch $sha
	   fi
	    ;;
    esac

    return 0
}

find_and_print_toplevel_actions()
{
    local branch="$1"
    local sha=$2
    local flat_mode=$3
    local branch_file="$(branch_state_sha_file $branch $sha)"

    if [ -n "$flat_mode" ]
    then
	    # We only want to print product branches
	    [[ $branch =~ cve/ ]] && return 
	    print_sha_action $branch $sha $(sed 's@:@ @' $branch_file)
	    return
    fi

    if [ -n "$verbose_mode" ]
    then
	    print_sha_action $branch $sha $(sed 's@:@ @' $branch_file)
	    return
    fi

    # We only need to print an action if all the parents have action=nope|blacklisted|unknown_*_disagree
    # because merging branches cannot assume they are the same in that regards. E.g.
    # they might have breaker backported or the blacklist doesn't is not valid in their
    # scope. 
    # All other actions are by definition inherited through the merge.
    # Our topo-order walk through the branch list will make sure that branches
    # are printed in a proper ordering
    local merge_branch=
    for merge_branch in $(print_merge_branches $branches_conf $branch) ; do
	    local merge_branch_file="$(branch_state_sha_file $merge_branch $sha)"
	    local mb_state=$(cut -d: -f1 $merge_branch_file)

	    [[ ! "$mb_state" =~ nope* && "$mb_state" != "blacklisted" && ! "$mb_state" =~ unknown_.*_disagree ]] && return
    done

    print_sha_action $branch $sha $(sed 's@:@ @' $branch_file)
}

print_maintainer_info()
{
    local SHA=$1
    local SGM_OUTPUT="$(suse-get-maintainers --sha - 2>/dev/null <<<$SHA)"
    local EMAILS="$(cut -d, -f3- <<<$SGM_OUTPUT | tr ',' ' ')"
    local output=
    local nbugs=
    local email=
    for email in $EMAILS
    do
	output="${output} ${email} ("
	nbugs="$($BUGZILLA_COUNT_USER_BUGS $email)"
	output="${output}${nbugs})"
    done
    local STANZA="$(echo $SGM_OUTPUT | cut -d, -f2)"
    output="$output subsystem/role=$STANZA"
    echo "$output"
}

# Used Globals
# references: references for this commit
# branches_conf:
# conf_file_map: config file DB
# enforce_expl_fixes: expl_fixes override those present in the commit
# expl_fixes: Fixes provided through command line
#
# Created Globals
# files: array of files touched by the sha
handle_single_sha()
{
	local sha=$1
	local cve="$2"
	shift 2
	local branches="$@"

	local git_fixes=
	# Handle in patch and provided git fixes
	if [ -n "$enforce_expl_fixes" ]
	then
		git_fixes=""
	else
		git_fixes="$(sha_get_upstream_git_fixes $sha "$cve")"
	fi
	[ -n "$expl_fixes" ] && git_fixes="$git_fixes $expl_fixes"

	if [ -z "$flat_mode" ]
	then
		echo -n "= "
		print_upstream_sha_summary $sha "$git_fixes" "$cve"

		if [ $maintainers -eq 1 -a -x $SUSE_GET_MAINTAINERS ]
		then
			echo -n "Experts candidates: "
			print_maintainer_info $sha
		fi

		echo "Link: https://git.kernel.org/linus/$sha"
	fi

	readarray -t files < <(sha2files "$sha")

	eligible_braches=0
	branches_with_warnings=0
	warning_only_mode=0
	# We do not know any breaker but we still want to check for warnings
	# for potentially eligible branches
	if [ -z "$git_fixes" -a -z "$enforce_expl_fixes" ]
	then
		warning_only_mode=1
		echo $sha >> $no_fixes_shas
	fi

	# TODO do we print actions per sha or per branch?
	if [ -n "$branches" ]
	then
		[ -n "$flat_mode" ] && fail "Explicit branches not supported in flat mode."
		single_branch_mode=1
		for branch in "$@"
		do
			local branch_file="$(branch_state_sha_file $branch $sha)"
			check_branch_state $branch "$sha" "$git_fixes" "$cvss" $references
			print_sha_action $branch $sha $(sed 's@:@ @g' $branch_file)
		done
	else
		# Check state of each branch
		single_branch_mode=0
		for_each_build_branch_paralel "$branches_conf" check_branch_state "$sha" "$git_fixes" "$cvss" $references

		for_each_build_branch "$branches_conf" find_and_print_toplevel_actions $sha "$flat_mode"
	fi

	[ $eligible_braches -gt 0 -a $eligible_braches -eq $branches_with_warnings ] &&  echo "All eligible branches have warnings. If they are correct then there is NO ACTION NEEDED for $sha"
}

verbose_mode=
flat_mode=
expl_fixes=""
maintainers=1

while getopts "hvrtns:b:Ff:c:" OPT
do
    case $OPT in
	h)
	    usage
	    exit
	    ;;
	v)
	    verbose_mode=1
	    ;;
	r)
	    refresh=1
	    ;;
	t)
	    flat_mode=1
	    ;;
	s)
	    cvss=$OPTARG
	    ;;
	b)
	    bsc="bsc#${OPTARG#bsc#}"
	    ;;
	f)
	    expl_fixes="$expl_fixes $OPTARG"
	    ;;
	F)
	    enforce_expl_fixes=1
	    ;;
	c)
	    cve=$OPTARG
	    ;;
	n)
	    maintainers=0

    esac
done

shift "$(($OPTIND-1))"

if [ -z "$1" ] ; then
    echo "No references provided"
    usage
    exit 1
fi

[ -n "$flat_mode" -a -n "$verbose_mode" ] && fail "Verbose -v and Flat -t modes are not compatible"

arg=$1
sha=$1
if ! sha_in_upstream "$1" ; then
	[ -n "$cve" ] && fail "SHA expected when -c CVE-XXXXXX-YYYY is used"
	sha="$(cve2sha $1 $refresh)"
	if [ -z "$sha" ]
	then
		[ -z "$VULNS_GIT" ] && fail "VULNS_GIT not defined. It has to point https://git.kernel.org/pub/scm/linux/security/vulns.git tree clone."
		find "$VULNS_GIT/cve/reserved" -iname $1 > /dev/null 2>&1 && fail "$1 is reserved but not fully published"
		fail "Can't find sha in upstream: $1."
	fi
	cve=$1
else
	# arg could be sha shortcut or tag name etc.
	# expand to a full sha
	sha=$(git -C $LINUX_GIT rev-parse $sha)
fi

# Try to do a reverse mapping to a CVE if sha is given as an argument
if [ -z "$cve" ]
then
	cve=$(sha2cve $sha $refresh)
	[ -n "$cve" ] && sha="$(cve2sha "$cve" $refresh)"
fi

if [ -n "$cve" ]
then
	[ -z "$bsc" ] && bsc=$(cve2bugzilla "$cve" $refresh)
	[ -z "$cvss" ] && cvss=$(cve2cvss "$cve" $refresh)
	echo "Security fix for "$cve" ${bsc:-bsc unknown} with CVSS ${cvss:-unknown}"
	is_cve_rejected "$cve" && echo "W: "$cve" has been rejected" >&2
	[ -z "$cvss" -o -z "$bsc" ] && fail "Incomplete references re-check with -r or use -s/-b to specify missing references"
fi

references="$cve $bsc"

branches_conf="$(fetch_branches $refresh)"
conf_file_map="$(fetch_conf_file_map "$refresh")"

# kick git-fixes in the background
if [ -z "$flat_mode" -a -x "$SUSE_GIT_FIXES" ]
then
	echo $sha | tr " " "\n" > $git_fixes_sha
	# Search the range starting in a common ancesstor of all shas to have
	# follow up history shared by all of them
	fixes_range="$sha"
	[ $(echo $sha | wc -w) -gt 1 ] && fixes_range=$(git -C $LINUX_GIT/.git merge-base $sha 2>/dev/null)
	$SUSE_GIT_FIXES --no-grouping -a -f $git_fixes_sha --repo $LINUX_GIT $fixes_range..origin/master > $git_fixes_output &
	git_fixes_pid=$!
fi

# Move to branches argument(s)
shift

for s in $sha
do
	if ! sha_in_upstream $s
	then
		echo "WW $s is not an upstream commit"
		continue
	fi
	handle_single_sha $s "$cve" $@
done

[ $git_fixes_pid -gt 0 ] && wait $git_fixes_pid

# Final conclusion shared for all shas
if [ ! -e "$actions_file" ]
then
	if [ ! -e "$affected_file" ]
	then
		echo "NO CODESTREAM AFFECTED"
	else
		# We either have fix or CVE blacklisted
		echo "NO ACTION NEEDED: All relevant branches contain the fix!"
	fi
elif [ -z "$flat_mode" ]
then
	if [ -f "$no_fixes_shas" -a $single_branch_mode -eq 0 ]
	then
		# FIXME this gets harder to optimize if there are multiple shas associated
		# with the CVE, keep this simple for now
		print_no_fixes_warning $arg "$cve"
	else
		action_needed
	fi
fi
