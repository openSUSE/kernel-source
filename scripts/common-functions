#!/bin/bash
# vim: sw=4:sts=4:et

get_cache_dir()
{
    local CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/check-kernel-fix"
    mkdir -p "${CACHE_DIR}"
    echo "${CACHE_DIR}"
}

fetch_cache()
{
    local CACHE_URL=$1
    local CACHE_FILE=$2
    local EXPIRE=$3
    local REFRESH=$4

    [ -n "$REFRESH" ] && rm "$CACHE_FILE" 2>/dev/null
    if [[ $(find "$CACHE_FILE" -mtime -${EXPIRE:-7} -print 2>/dev/null) \
            && -s "$CACHE_FILE" ]]; then
        echo $CACHE_FILE
        return
    fi
    curl --fail --connect-timeout 2 -L "$CACHE_URL" -o "$CACHE_FILE" >/dev/null 2>&1
    [ -e "$CACHE_FILE" ] || fail "unable to fetch $CACHE_URL"
    echo $CACHE_FILE
}

fetch_branches()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_BRANCHES="${CACHE_DIR}/branches.conf"
    local URL="https://kerncvs.suse.de/branches.conf"
    local REFRESH=$1
    fetch_cache $URL $CACHED_BRANCHES 7 $REFRESH
}

fetch_cve2bugzilla()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CVE2BSC="${CACHE_DIR}/cve2bugzilla"
    local URL="https://gitlab.suse.de/security/cve-database/-/raw/master/data/cve2bugzilla"
    local REFRESH=$1
    fetch_cache $URL $CACHED_CVE2BSC 1 $REFRESH
}

fetch_conf_file_map()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CONF_FILE_MAP="${CACHE_DIR}/conf_file_map.sqlite"
    local URL="https://kerncvs.suse.de/conf_file_map.sqlite"
    local REFRESH="$1"
    fetch_cache "$URL" "$CACHED_CONF_FILE_MAP" 7 "$REFRESH"
}

cve2bugzilla()
{
    local CVE=$1
    local CVE2BUGZILLA=$(fetch_cve2bugzilla $2)
    local BSC="$(grep -w $CVE $CVE2BUGZILLA | cut -d: -f2 | head -n 1)"

    if [ -n "$BSC" ]
    then
	    echo -n "bsc#$BSC"
    else
	    # ./scripts/python/cve2bsc can take multiple CVEs or bug aliases and prints either a bug number or a zero
	    # in case of lookup failure per line in the same order or just one zero in case of a complete failure
	    local BSC=$(./scripts/python/cve2bsc $CVE)
	    if [[ $BSC -gt 0 ]]; then
		echo -n "bsc#$BSC"
	    fi
    fi
}

fetch_cve2cvss()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CVE2CVSS="${CACHE_DIR}/cve2cvss"
    local URL="http://ftp.suse.com/pub/projects/security/yaml/suse-cvss-scores.yaml"
    local REFRESH=$1
    fetch_cache $URL $CACHED_CVE2CVSS 1 $REFRESH
}

cve2cvss()
{
    local CVE=$1
    local REFRESH=$2
    local CVE2CVSS=$(fetch_cve2cvss $REFRESH)
    local cvss="$(grep -w $CVE -A3 $CVE2CVSS | grep score:)"

    if [ -n "$cvss" ]
    then
	    echo ${cvss##*:}
    else
	    # DB is not yet up to date so query the bugzilla
	    ./scripts/python/get-bugzilla-metadata -f score $CVE 2>/dev/null
    fi
}

cve2sha()
{
	local arg=$1
	local REFRESH=$2
	local sha_file=$(cd $VULNS_GIT; [ -n "$REFRESH" ] && git pull >/dev/null 2>&1; find cve/ -iname ${arg}.sha1)
	
	if [ -f "$VULNS_GIT/$sha_file" ]
	then
		cat "$VULNS_GIT/$sha_file"
	fi
}

is_cve_rejected()
{
	local cve=$1
	local found=$(find $VULNS_GIT/cve/rejected/ -iname "$cve.sha1" 2>/dev/null | wc -l)
	[ $found -eq 1 ] && return 0
	return 1
}

sha2cve()
{
	local arg=$1
	local REFRESH=$2
	local sha_file
	sha_file="$(cd $VULNS_GIT; [ -n "$REFRESH" ] && git pull >/dev/null 2>&1; git grep -l $arg -- cve/*.sha1 2>/dev/null)"

	[ $? -eq 0 ] || return
	basename -s .sha1 "$sha_file"
}

sha2files()
{
	local sha="$1"
	git --git-dir=$LINUX_GIT/.git show --pretty="" --name-only "$sha" -- '*.[ch]'
}

split_join_files()
{
	declare -a files=()
	for file
	do
		# split and quote (for SQL syntax) and use doubled quotes when
		# a quote is in filename (likely impossible in the kernel)
		# D/ab.c  -> ('D', 'ab.c')    OR    D/a'b.c  ->  ('D', 'a''b.c')
		local dir="${file%/*}"
		dir="${dir//\'/\'\'}"
		file="${file##*/}"
		file="${file//\'/\'\'}"
		files+=( "('$dir', '$file')" )

	done
	local OLD_IFS="$IFS"
	IFS=,
	echo "${files[*]}"
	IFS="$OLD_IFS"
}

check_for_headers()
{
	local output_file_name=$1
	local f=
	local headers=0
	shift
	for f in "$@"
	do
		if [[ "$f" =~ \.h$ ]]
		then
			echo -e "\tWW modifies $f. Check for includes outside of disabled configs." >> $output_file_name
			let headers++
		fi
	done

	return $headers
}

# check if configuration items corresponding to input files are
# are enabled in a given branch. This function queries
# conf_file_map database to determine this. If input files contain
# header files we can't conclusively say which configuration correspond
# to them.
#
# return values:
# 0 - if all configs enabled and no header files in the input files.
# 1 - if all configs disabled in the given branch
# 2 - if few but not all configs disabled or there are header files in the input files.
#
check_config()
{
	local branch="$1"
	local CONF_FILE_MAP="$2"
	local output_file_name="$3"
	shift 3
	local failed=0
	local conf_num=0

	local files="$(split_join_files "$@")"

	ORIG_IFS="$IFS"
	while IFS=, read conf enabled
	do
		IFS="$ORIG_IFS"
		let conf_num++
		[ $enabled -gt 0 ] && continue

		echo -e "\tWW $conf not enabled." >> $output_file_name
		let failed++
	done < <(sqlite3 -batch -noheader -csv "$CONF_FILE_MAP" \
		"SELECT config.config,
			sum(cbmap.value IS NOT NULL AND cbmap.value != 'n') AS enabled
			FROM conf_file_map AS cfmap
			LEFT JOIN config ON cfmap.config = config.id
			LEFT JOIN conf_branch_map AS cbmap ON
				cbmap.config = cfmap.config AND
				cbmap.branch = cfmap.branch
			WHERE cfmap.branch = (SELECT id
				FROM branch
				WHERE branch='$branch') AND
			cfmap.file IN (SELECT file.id
				FROM file
				LEFT JOIN dir ON file.dir=dir.id
				WHERE (dir.dir, file.file) IN ($files))
			GROUP BY cfmap.config
			ORDER BY config.config;")


	if [ $failed -gt 0 ]
	then
            if [ $failed -lt $conf_num ]
            then
		echo -e "\tWW $failed out of $conf_num disabled." >> $output_file_name
                return 2
            else
                check_for_headers $output_file_name "$@" || return 2
                echo -e  "\tWW all configs disabled" >> $output_file_name
                return 1
            fi
	fi

        return 0
}

branch_has_leap()
{
	local branch="$1"

	[[ "$branch" =~ SLE15-SP6.* || "$branch" =~ SL-16.0.* ]]
	return $?
}

# check if modules corresponding to input files are
# are supported in a given branch. This function queries
# module_file_map database to determine this. If input files contain
# header files we can't conclusively say which modules correspond
# to them.
#
# return values:
# 0 - if all modules supported
# 1 - if all modules unsupported in the given branch
# 2 - if few but not all modules supported or there are header files in the input files.
#
check_mod_support()
{
	local branch="$1"
	local CONF_FILE_MAP="$2"
	local output_file_name="$3"
	shift 3
	local failed=0
	local mod_num=0
	local has_leap=0

	branch_has_leap "$branch" && has_leap=1

	local files="$(split_join_files "$@")"

	ORIG_IFS="$IFS"
	while IFS=, read module supported leap_supported built_in
	do
		IFS="$ORIG_IFS"
		let mod_num++
		[ $supported -gt 0 -o $built_in -gt 0 ] && continue

		local leap_mode=""
		if [ $leap_supported -gt 0 -a $has_leap -eq 1 ]
		then
			leap_mode=" Best effort mode for Leap."
		else
			let failed++
		fi
		echo -e "\tWW $module not supported.$leap_mode" >> "$output_file_name"
	done < <(sqlite3 -batch -noheader -csv "$CONF_FILE_MAP" \
		"SELECT module_dir.dir || '/' || module.module,
				sum(mdmap.supported >= 0) AS supported,
				sum(mdmap.supported >= -2) AS leap_supported,
				sum(cbmap.value IS 'y') AS built_in
			FROM module_file_map AS mfmap
			LEFT JOIN module ON mfmap.module = module.id
			LEFT JOIN dir AS module_dir ON
				module.dir = module_dir.id
			LEFT JOIN module_details_map AS mdmap ON
				mdmap.module = module.id AND
				mdmap.branch = mfmap.branch
			LEFT JOIN conf_file_map AS cfmap ON
				cfmap.file = mfmap.file AND
				cfmap.branch = mfmap.branch
			LEFT JOIN conf_branch_map AS cbmap ON
				cbmap.config = cfmap.config AND
				cbmap.branch = mfmap.branch
			WHERE mfmap.branch = (SELECT id
				FROM branch
				WHERE branch='$branch') AND
			mfmap.file IN (SELECT file.id
				FROM file
				LEFT JOIN dir ON file.dir=dir.id
				WHERE (dir.dir, file.file) IN ($files))
			GROUP BY mfmap.module
			ORDER BY module_dir.dir, module.module;")
	if [ $failed -gt 0 ]
	then
            if [ $failed -lt $mod_num ]
            then
		echo -e "\tWW $failed out of $mod_num unsupported." >> "$output_file_name"
                return 2
            else
		check_for_headers $output_file_name "$@" || return 2
                echo -e  "\tWW all modules unsupported" >> $output_file_name
                return 1
            fi
	fi

	return 0
}

# Check if input files are specific to a certain architecture
# that is not supported in a given branch.
#
# return values:
# 0 - input files correspond to a supported architecture
# 1 - input files correspond to an unsupported architecture
check_arch_support()
{
	local branch="$1"
	local warn_file="$2"
	shift 2

	local d
	local unsupported_arches

	[ -z "$1" ] && return 0

	for d in $(dirname $@ | sort -u)
	do
		# This directory contains both arm and arm64 files
		[[ $d =~ drivers/iommu/arm* ]] && return 0

		case $d in
			*powerpc* ) arch=ppc64le
				;;
			*s390* ) arch=s390x
				;;
			*x86* ) arch=x86_64
				;;
			*arm64* ) arch=arm64
				;;
			*/arm* ) arch=armv7hl
				;;
			arch/*) arch=$(echo $d | cut -d/ -f2)
				;;
			* ) return 0
				;;
		esac
		git grep -w $arch origin/${branch#origin/} -- config.conf >/dev/null 2>&1 && return 0
		unsupported_arches="$unsupported_arches $arch"
	done
	echo -e "\tWW fix is specific to unsupported $unsupported_arches" >> $warn_file
	return 1
}

print_merge_branches()
{
    local branches_conf="$1"
    local branch="$2"
    local merge_branch=

    [ -z "$branches_conf" ] && fail "megre_branches: No branches_conf provided"
    [ -z "$branch" ] && fail "merge_branches: No branch provided"

    local word=
    for word in $(grep -w "^$branch:" "$branches_conf") ; do
	if [ "${word#merge:}" != "$word" ] ; then
	    merge_branch="${word#merge:}"
	    merge_branch="${merge_branch#-}"
	    [ -z "$merge_branch" ] && fail "print_merge_branges: non supported syntax"
	    if [ "$merge_branch" != 'scripts' ]
	    then
		    echo "$merge_branch"
	    fi
	fi
    done
}

print_children_branches()
{
    local branches_conf="$1"
    local branch="$2"

    [ -z "$branches_conf" ] && fail "children_branches: No branches_conf provided"
    [ -z "$branch" ] && fail "children_branches: No branch provided"

    while read -r line ; do
	local child="${line%%:*}"
	if [ "$child" != 'scripts' ]
	then
		echo "$child"
	fi
    done < <(grep -E "merge:-?$branch" "$branches_conf")
}

merge_topo_sort()
{
	local branches_conf=$1
	awk '	/^#/{next}
		/^(master|vanilla|linux-next|stable|slowroll)/{next}
		!/\<build\>/{next}
		{
			gsub("merge:-", "merge:")
			branch=substr($1, 0, length($1)-1)
			printf "%s %s\n", branch, branch
			for (w=2; w <= NR; w++) {
				if (index($w, "merge:")) {
					dep=substr($w, 7)
					if (dep != "scripts")
						printf "%s %s\n", dep, branch
				}
			}
		}' "$branches_conf" | tsort -
}

for_each_build_branch()
{
    local branches_conf="$1"
    local fn="$2"
    shift 2
    local args=("$@")

    while read line ; do
	line="${line%%\#*}"
	branch="${line%%:*}"

	# empty line or comment
	if [ -z "$branch" ] ; then
	   continue
	fi

	$fn "$branch" "${args[@]}" || break
    done < <(merge_topo_sort "$branches_conf")
}

for_each_build_branch_paralel()
{
    local branches_conf="$1"
    local fn="$2"
    shift 2
    local args=("$@")
    local pids=""

    while read line ; do
       line="${line%%\#*}"
       branch="${line%%:*}"

       # empty line or comment
       if [ -z "$branch" ] ; then
          continue
       fi

       $fn "$branch" "${args[@]}" &
       pids="$pids $!"
    done < <(merge_topo_sort "$branches_conf")

    wait $pids
}

fail()
{
	echo $* >&2
	exit 1
}

branch_base_ver()
{
    local branch="$1"
    git show-ref --verify --quiet "refs/remotes/origin/${branch#origin/}" || fail "$branch invalid branch. Please git fetch origin."

    local base_ver="v$(git grep SRCVERSION origin/${branch#origin/} -- rpm/config.sh | sed 's@.*=@@')"

    echo $base_ver
}

sha_get_upstream_git_fixes()
{
    local sha=$1
    local cve=$2
    local fix=""
    local fixes=""

    [ -z "$sha" ] && fail "No commit provided"
    [ -z "$LINUX_GIT" ] && fail "No upstream git tree"

    for fix in $(git --git-dir="$LINUX_GIT/.git" show $sha | sed -n -e "s/^[[:blank:]]*[Ff]ixes:[[:blank:]]*\([[:alnum:]]*\).*$/\1/p")
    do
	    sha_in_upstream "$fix" && fixes="$fixes $fix"
    done

    # No Fixes tag
    if [ -z "$fixes" ]
    then
	    # Try revert first
	    fixes="$(git --git-dir="$LINUX_GIT/.git" show $sha | grep -i "This reverts commit" | sed 's@.*This reverts commit \([0-9a-f]\+\)\>.*@\1@I')"

	    # Try ./cve/published/*/cve.vulnerable
	    if [ -z "$fixes" -a -n "$cve" -a -d "$VULNS_GIT" ]
	    then
		    has_vulnerable="$(find $VULNS_GIT/cve/published/ -iname "$cve.vulnerable")"
		    if [ -f "$has_vulnerable" ]
		    then
			    vulnerable_fixes="$(cat $has_vulnerable)"
			    local f=
			    # We need to do filtering here because in multi sha CVEs
			    # it is not clear for which of the sha the vulnerable entry
			    # is really meant. Just use those which are ancestors of the
			    # sha
			    for f in $vulnerable_fixes
			    do
				    git -C $LINUX_GIT/.git merge-base --is-ancestor $f $sha 2>/dev/null || continue
				    fixes="$fixes$f "
			    done
		    fi
	    fi
    fi

    echo $fixes

    exit 1
}

print_upstream_sha_info()
{
    local sha=$1

    echo -n "$(git --git-dir="$LINUX_GIT/.git" show  -s --pretty='format:%h ("%s")' $sha) merged "
    git --git-dir="$LINUX_GIT/.git" describe --contains --abbrev=0 --match="v*" $sha
}

is_vuln_fixes()
{
	local fix=$1
	local cve=$2

	[ -z "$cve" ] && return 1
	local vuln_file="$(cd $VULNS_GIT; find . -iname $cve.vulnerable)"
	[ -z "$vuln_file" ] && return

	local f
	for f in $(cat $VULNS_GIT/$vuln_file)
	do
		[[ $f == $fix ]] || continue
		git -C $VULNS_GIT log --pretty=format:%an -- $vuln_file | tr "\n" ","
	done
}

print_upstream_sha_summary()
{
    local sha=$1
    local fixes=$2
    local cve=$3
    local has_fixes=0

    print_upstream_sha_info $sha
    local fix=
    for fix in $fixes
    do
	    local vuln_f="$(is_vuln_fixes $fix $cve)"
	    if [ -n "$vuln_f" ]
	    then
		    echo -n "Vuln Fixes ($vuln_f): "
	    else
		    echo -n "Fixes: "
	    fi
	    print_upstream_sha_info $fix
	    has_fixes=1
    done

    if [ $has_fixes -eq 0 ]
    then
	    echo "No Fixes tag. Requires manual review for affected branches."
    fi
}

sha_merged_in_upstream_tag()
{
    local sha=$1
    local base=$2

    [ -z "$sha" ] && fail "sha_merged_in_upstream_tag: No sha provided"
    [ -z "$base" ] && fail "sha_merged_in_upstream_tag: No base provided"

    git --git-dir="$LINUX_GIT/.git" merge-base --is-ancestor "$sha" "$base" 2>/dev/null
}

sha_in_upstream()
{
    local sha=$1

    [ -z "$sha" ] && fail "sha_in_upstream: No sha provided"

    sha_merged_in_upstream_tag $sha origin/master
}

affected_by_git_fixes()
{
    local branch="$1"
    local base="$2"
    shift 2
    local git_fixes="$@"

    [ -z "$branch" ] && fail "affected_by_git_fixes: No branch provided"
    [ -z "$base" ] && fail "affected_by_git_fixes: No tag provided"

    # Check git fixes when the bug was introduced
    local affected_by=

    local in_base=
    local in_backport=
    local git_fix=
    for git_fix in $git_fixes ; do
	in_base=0
	in_backport=0

	# Is it merged in the upstream base kernel?
	if sha_merged_in_upstream_tag "$git_fix" "$base" ; then
	    in_base=1
	fi

	# Do we have it backported?
	if sha_merged_in_suse_tree "$git_fix" "$branch" ; then
	    in_backport=1
	fi

	[ $in_backport -eq 1 ] && affected_by="$affected_by $git_fix"
	[ $in_base -eq 1 ] && affected_by="$affected_by $base"
    done

    if [ -n "$affected_by" ] ; then
	echo "Fixes: $affected_by"
    fi
}

sha_to_patch_in_branch()
{
    local sha="$1"
    local branch="${2#origin/}"

    [ -z "$sha" ] && fail "sha_to_patch_in_branch: No sha provided"
    [ -z "$branch" ] && fail "sha_to_patch_in_branch: No branch provided"

    local branch_file=$(git --no-pager grep -l -i -E "^(git|alt)-commit[[:space:]]*:[[:space:]]*$sha" "origin/$branch" -- 'patches.*' 2>/dev/null )

    echo "${branch_file#origin/$branch:}"
}

reference_to_patch_in_branch()
{
    local reference="$1"
    [ -z "$reference" ] && return
    local branch="${2#origin/}"

    local branch_file="$(git --no-pager grep -l -i -E "^references:.*$reference" origin/$branch -- 'patches.*' 2>/dev/null )"

    echo "${branch_file#origin/$branch:}"
}

sha_merged_in_suse_tree()
{
    local sha="$1"
    local branch="$2"

    [ -z "$sha" ] && fail "sha_merged_in_suse_tree: No sha provided"
    [ -z "$branch" ] && fail "sha_merged_in_suse_tree: No branch provided"

    local patch=$(sha_to_patch_in_branch "$sha" "$branch")

    test -n "$patch"
}

patch_has_reference()
{
    local ref="$1"
    local patch="$2"

    [ -z "$patch" ] && fail "No patch provided"
    [ -z "$ref" ] && fail "No reference provided"

    grep -q -i "^references:.*$ref" "$patch"
}

patch_has_reference_in_branch()
{
    local patch="$1"
    local ref="$2"
    local branch="$3"

    [ -z "$patch" ] && fail "patch_has_reference_in_branch: No patch provided"
    [ -z "$ref" ] && fail "patch_has_reference_in_branch: No reference provided"
    [ -z "$branch" ] && fail "patch_has_reference_in_branch: No branch provided"

    git --no-pager grep -w -q -i "^references:.*$ref" "origin/${branch#origin/}" -- "$patch"
}

pending_pr_branches()
{
	local branch=$1
	git --no-pager branch -r --no-merged origin/${branch#origin/} "*/users/*/${branch#origin/}/for-next"
}

cvss_affects_branch()
{
	local branch="$1"
	local cvss="${2%%.*}"
	local ret=1

	[ -z "$cvss" ] && cvss=0

	# SLE16 is in the final GA phase
	if [[ "$branch" == "SL-16.0-GA" ]]
	then
		[ $cvss -ge 9 ] && ret=0
	elif [[ "$branch" =~ .*-EB.* ]]
	then
		[ $cvss -ge 9 ] && ret=0
	elif [[ "$branch" =~ .*-GA.* ]]
	then
		[ $cvss -ge 7 ] && ret=0
	elif [[ "$branch" =~ .*-LTSS.* ]]
	then
		[ $cvss -ge 7 ] && ret=0
	else
		ret=0
	fi
	return $ret
}

get_blacklist_entry()
{
	local branch=$1
	local sha=$2
	local cve=$3

	if [ -n "$cve" ]
	then
		git grep -hiE "(^$cve|^$sha\b.*#.*$cve)" origin/$branch -- blacklist.conf 2>/dev/null
	else
		git grep -hiE "^$sha\b" origin/$branch -- blacklist.conf 2>/dev/null
	fi
}
